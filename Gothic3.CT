<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"health"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>Script.dll+66E00</Address>
      <Offsets>
        <Offset>14</Offset>
        <Offset>4</Offset>
        <Offset>14</Offset>
        <Offset>a8</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>12</ID>
      <Description>"mana"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>Script.dll+66E00</Address>
      <Offsets>
        <Offset>14</Offset>
        <Offset>4</Offset>
        <Offset>a4</Offset>
        <Offset>a8</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>19</ID>
      <Description>"выносливость"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>Script.dll+66E00</Address>
      <Offsets>
        <Offset>-c</Offset>
        <Offset>4</Offset>
        <Offset>a4</Offset>
        <Offset>a8</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>18</ID>
      <Description>"max mana"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Gothic3.exe
  Version: 
  Date   : 2020-05-31
  Author : Hipp

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(max_mana,Game.dll,8B 7E 14 03 7C 24 14) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
  push [esi+18]
  pop [esi+14]
code:
  mov edi,[esi+14]
  add edi,[esp+14]
  jmp return

max_mana:
  jmp newmem
  nop 2
return:
registersymbol(max_mana)

[DISABLE]

max_mana:
  db 8B 7E 14 03 7C 24 14

unregistersymbol(max_mana)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Game.dll"+14ED27

"Game.dll"+14ED0B: 8D 81 A8 00 00 00  -  lea eax,[ecx+000000A8]
"Game.dll"+14ED11: E8 7A 48 01 00     -  call Game.dll+163590
"Game.dll"+14ED16: 85 C0              -  test eax,eax
"Game.dll"+14ED18: 74 3A              -  je Game.dll+14ED54
"Game.dll"+14ED1A: 8B 70 04           -  mov esi,[eax+04]
"Game.dll"+14ED1D: 85 F6              -  test esi,esi
"Game.dll"+14ED1F: 74 33              -  je Game.dll+14ED54
"Game.dll"+14ED21: 8B 16              -  mov edx,[esi]
"Game.dll"+14ED23: 8B 42 58           -  mov eax,[edx+58]
"Game.dll"+14ED26: 57                 -  push edi
// ---------- INJECTING HERE ----------
"Game.dll"+14ED27: 8B 7E 14           -  mov edi,[esi+14]
"Game.dll"+14ED2A: 03 7C 24 14        -  add edi,[esp+14]
// ---------- DONE INJECTING  ----------
"Game.dll"+14ED2E: 6A 00              -  push 00
"Game.dll"+14ED30: 68 88 00 91 00     -  push Game.dll+2D0088
"Game.dll"+14ED35: 8B CE              -  mov ecx,esi
"Game.dll"+14ED37: FF D0              -  call eax
"Game.dll"+14ED39: 8B 16              -  mov edx,[esi]
"Game.dll"+14ED3B: 8B 42 5C           -  mov eax,[edx+5C]
"Game.dll"+14ED3E: 6A 00              -  push 00
"Game.dll"+14ED40: 68 88 00 91 00     -  push Game.dll+2D0088
"Game.dll"+14ED45: 8B CE              -  mov ecx,esi
"Game.dll"+14ED47: 89 7E 14           -  mov [esi+14],edi
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"STR"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>Script.dll+66E00</Address>
      <Offsets>
        <Offset>14</Offset>
        <Offset>4</Offset>
        <Offset>44</Offset>
        <Offset>a8</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"ловкость"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>Script.dll+66E00</Address>
      <Offsets>
        <Offset>14</Offset>
        <Offset>-2c</Offset>
        <Offset>44</Offset>
        <Offset>a8</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"древние знания"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>Script.dll+66E00</Address>
      <Offsets>
        <Offset>2c</Offset>
        <Offset>4</Offset>
        <Offset>44</Offset>
        <Offset>a8</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"быстрая панель"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Gothic3.exe
  Version: 
  Date   : 2018-06-19
  Author : Hipp

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(inv,Game.dll,29 6B 3C 83 7F 0C 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  xor ebp,ebp
  inc [ebx+3c]
  sub [ebx+3C],ebp
  cmp dword ptr [edi+0C],00
  jmp return

inv:
  jmp newmem
  nop
  nop
return:
registersymbol(inv)

[DISABLE]

inv:
  db 29 6B 3C 83 7F 0C 00

unregistersymbol(inv)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Game.dll"+C3988

"Game.dll"+C3974: 32 C0              -  xor al,al
"Game.dll"+C3976: 5D                 -  pop ebp
"Game.dll"+C3977: C2 04 00           -  ret 0004
"Game.dll"+C397A: E8 51 04 00 00     -  call Game.dll+C3DD0
"Game.dll"+C397F: 5B                 -  pop ebx
"Game.dll"+C3980: 5F                 -  pop edi
"Game.dll"+C3981: 5E                 -  pop esi
"Game.dll"+C3982: B0 01              -  mov al,01
"Game.dll"+C3984: 5D                 -  pop ebp
"Game.dll"+C3985: C2 04 00           -  ret 0004
// ---------- INJECTING HERE ----------
"Game.dll"+C3988: 29 6B 3C           -  sub [ebx+3C],ebp
"Game.dll"+C398B: 83 7F 0C 00        -  cmp dword ptr [edi+0C],00
// ---------- DONE INJECTING  ----------
"Game.dll"+C398F: 74 0C              -  je Game.dll+C399D
"Game.dll"+C3991: 8B 4F 0C           -  mov ecx,[edi+0C]
"Game.dll"+C3994: 8B 11              -  mov edx,[ecx]
"Game.dll"+C3996: 8B 42 04           -  mov eax,[edx+04]
"Game.dll"+C3999: 53                 -  push ebx
"Game.dll"+C399A: 56                 -  push esi
"Game.dll"+C399B: FF D0              -  call eax
"Game.dll"+C399D: 5B                 -  pop ebx
"Game.dll"+C399E: 5F                 -  pop edi
"Game.dll"+C399F: 5E                 -  pop esi
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"ed point"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>Script.dll+66E00</Address>
      <Offsets>
        <Offset>58</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"inv"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
при передачи предметов сундук или NPC
}
[ENABLE]
Game.dll+B6FD5:
 db 90 90 90
//add [esi+3C],ebx
//Game.dll+C3988:
//add [ebx+3C],ebp

 
 
[DISABLE]
Game.dll+B6FD5:
 sub [esi+3C],ebx

//Game.dll+C3988:
// sub [ebx+3C],ebp

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>73</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"востановление"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Gothic3.exe
  Version: 
  Date   : 2018-06-20
  Author : Hipp

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(plus,Game.dll,89 4E 14 68 88 00 9c 00 8B CE FF D0 5E B0) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
  mov ecx,[esi+18]

code:
  mov [esi+14],ecx
  push Game.dll+2D0088
  jmp return

plus:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(plus)

[DISABLE]

plus:
  db 89 4E 14 68 88 00 9c 00

unregistersymbol(plus)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Game.dll"+14EBCC

"Game.dll"+14EBB1: 8B 16              -  mov edx,[esi]
"Game.dll"+14EBB3: 8B 42 58           -  mov eax,[edx+58]
"Game.dll"+14EBB6: 6A 00              -  push 00
"Game.dll"+14EBB8: 68 88 00 C1 00     -  push Game.dll+2D0088
"Game.dll"+14EBBD: 8B CE              -  mov ecx,esi
"Game.dll"+14EBBF: FF D0              -  call eax
"Game.dll"+14EBC1: 8B 4C 24 10        -  mov ecx,[esp+10]
"Game.dll"+14EBC5: 8B 16              -  mov edx,[esi]
"Game.dll"+14EBC7: 8B 42 5C           -  mov eax,[edx+5C]
"Game.dll"+14EBCA: 6A 00              -  push 00
// ---------- INJECTING HERE ----------
"Game.dll"+14EBCC: 89 4E 14           -  mov [esi+14],ecx
"Game.dll"+14EBCF: 68 88 00 C1 00     -  push Game.dll+2D0088
// ---------- DONE INJECTING  ----------
"Game.dll"+14EBD4: 8B CE              -  mov ecx,esi
"Game.dll"+14EBD6: FF D0              -  call eax
"Game.dll"+14EBD8: 5E                 -  pop esi
"Game.dll"+14EBD9: B0 01              -  mov al,01
"Game.dll"+14EBDB: 5B                 -  pop ebx
"Game.dll"+14EBDC: C2 08 00           -  ret 0008
"Game.dll"+14EBDF: 5E                 -  pop esi
"Game.dll"+14EBE0: 32 C0              -  xor al,al
"Game.dll"+14EBE2: 5B                 -  pop ebx
"Game.dll"+14EBE3: C2 08 00           -  ret 0008
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>15</ID>
      <Description>"OHK"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Gothic3.exe (остановлен)
  Version: 
  Date   : 2020-05-30
  Author : Hipp

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(OHK,Game.dll,8B 41 14 03 41 10) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
  push ebx
  mov ebx,[[[[Script.dll+66E00]+a8]+44]+4]
  cmp ecx,ebx
  pop ebx
  je correct
  push ebx
  mov ebx,[[[[Script.dll+66E00]+a8]+44]-2c]
  cmp ecx,ebx
  pop ebx
  je correct

code:
  mov eax,[ecx+14]
  add eax,[ecx+10]
  jmp return
correct:
  mov eax,00002710 //10000
  add eax,[ecx+10]
  jmp return
OHK:
  jmp newmem
  nop
return:
registersymbol(OHK)

[DISABLE]

OHK:
  db 8B 41 14 03 41 10

unregistersymbol(OHK)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Game.dll"+183880

"Game.dll"+183876: CC                    -  int 3 
"Game.dll"+183877: CC                    -  int 3 
"Game.dll"+183878: CC                    -  int 3 
"Game.dll"+183879: CC                    -  int 3 
"Game.dll"+18387A: CC                    -  int 3 
"Game.dll"+18387B: CC                    -  int 3 
"Game.dll"+18387C: CC                    -  int 3 
"Game.dll"+18387D: CC                    -  int 3 
"Game.dll"+18387E: CC                    -  int 3 
"Game.dll"+18387F: CC                    -  int 3 
// ---------- INJECTING HERE ----------
"Game.dll"+183880: 8B 41 14              -  mov eax,[ecx+14]
"Game.dll"+183883: 03 41 10              -  add eax,[ecx+10]
// ---------- DONE INJECTING  ----------
"Game.dll"+183886: C3                    -  ret 
"Game.dll"+183887: CC                    -  int 3 
"Game.dll"+183888: CC                    -  int 3 
"Game.dll"+183889: CC                    -  int 3 
"Game.dll"+18388A: CC                    -  int 3 
"Game.dll"+18388B: CC                    -  int 3 
"Game.dll"+18388C: CC                    -  int 3 
"Game.dll"+18388D: CC                    -  int 3 
"Game.dll"+18388E: CC                    -  int 3 
"Game.dll"+18388F: CC                    -  int 3 
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"repair"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Gothic3.exe
  Version: 
  Date   : 2020-05-31
  Author : Hipp

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(repair,Game.dll,6A 00 89 4E 14 68 88 00 xx 00 8B CE FF D0 5E B0) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
  mov ecx,[esi+18]
code:
  push 00
  mov [esi+14],ecx
  jmp return

repair:
  jmp newmem
return:
registersymbol(repair)

[DISABLE]

repair:
  db 6A 00 89 4E 14

unregistersymbol(repair)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Game.dll"+14EBCA

"Game.dll"+14EBAF: 74 2E              -  je Game.dll+14EBDF
"Game.dll"+14EBB1: 8B 16              -  mov edx,[esi]
"Game.dll"+14EBB3: 8B 42 58           -  mov eax,[edx+58]
"Game.dll"+14EBB6: 6A 00              -  push 00
"Game.dll"+14EBB8: 68 88 00 83 00     -  push Game.dll+2D0088
"Game.dll"+14EBBD: 8B CE              -  mov ecx,esi
"Game.dll"+14EBBF: FF D0              -  call eax
"Game.dll"+14EBC1: 8B 4C 24 10        -  mov ecx,[esp+10]
"Game.dll"+14EBC5: 8B 16              -  mov edx,[esi]
"Game.dll"+14EBC7: 8B 42 5C           -  mov eax,[edx+5C]
// ---------- INJECTING HERE ----------
"Game.dll"+14EBCA: 6A 00              -  push 00
"Game.dll"+14EBCC: 89 4E 14           -  mov [esi+14],ecx
// ---------- DONE INJECTING  ----------
"Game.dll"+14EBCF: 68 88 00 83 00     -  push Game.dll+2D0088
"Game.dll"+14EBD4: 8B CE              -  mov ecx,esi
"Game.dll"+14EBD6: FF D0              -  call eax
"Game.dll"+14EBD8: 5E                 -  pop esi
"Game.dll"+14EBD9: B0 01              -  mov al,01
"Game.dll"+14EBDB: 5B                 -  pop ebx
"Game.dll"+14EBDC: C2 08 00           -  ret 0008
"Game.dll"+14EBDF: 5E                 -  pop esi
"Game.dll"+14EBE0: 32 C0              -  xor al,al
"Game.dll"+14EBE2: 5B                 -  pop ebx
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Изменение push ebx</Description>
      <AddressString>0381000F</AddressString>
      <Before>
        <Byte>84</Byte>
        <Byte>1B</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>53</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>1D</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
  <Comments>Game.dll+83E95 - mov edx,[eax+1C] //репутация городов
</Comments>
</CheatTable>
